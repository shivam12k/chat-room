{"version":3,"sources":["components/ChatInput.jsx","components/Messages.jsx","components/Chatbox.jsx","components/logo.png","components/Navbar.jsx","components/UserName.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ChatInput","texting","e","setState","text","target","value","display","console","log","state","action","id","className","type","Text","placeholder","onChange","onClick","this","Component","Messages","Chatbox","Navbar","href","src","logo","alt","UserName","props","name","event","username","Router","App","handleEntry","length","route","window","alert","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qUA0CeA,G,8DArCb,aAAc,IAAD,8BACT,gBAKJC,QAAQ,SAACC,GACH,EAAKC,SAAS,CAACC,KAAKF,EAAEG,OAAOC,SAPtB,EAUbC,QAAQ,WACNC,QAAQC,IAAI,EAAKC,MAAMN,OATrB,EAAKM,MAAM,CACPN,KAAK,IAHA,E,qDAcD,IAAD,OACT,OACE,8BACE,sBAAMO,OAAO,IAAIC,GAAG,iBAApB,SACE,sBAAKC,UAAU,OAAf,UACE,uBAAOA,UAAU,MACjBC,KAAMC,KACNC,YAAY,iBACZC,SAAU,SAACf,GAAD,OAAK,EAAKD,QAAQC,MAE5B,wBACAgB,QAASC,KAAKZ,QACdM,UAAU,UACTC,KAAK,SAHN,6B,GA1BYM,cCmBTC,G,MAlBE,WACb,OACI,gCACI,oCACA,qBAAKR,UAAU,uDAAf,kDAGA,mBAAGA,UAAU,QAAb,iBACA,qBAAKA,UAAU,sBAAf,uDCYGS,EAjBC,WACZ,OAAS,sBAAMT,UAAY,UAAlB,UACL,sBACIA,UAAY,UADhB,UAEA,cACA,EADA,IAEA,cACA,EADA,OALK,QCRE,G,MAAA,IAA0B,kCCmB1BU,EAhBA,WACX,OAEO,qBAAKV,UAAU,4DAAf,SACI,oBAAGW,KAAK,IAAIX,UAAU,oBAAtB,UACA,qBAAKY,IAAKC,EAAMb,UAAU,OAAOc,IAAI,SADrC,kBC6CAC,G,8DAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDnB,MAAQ,CACXoB,KAAM,IAHS,E,qDAOV5B,GACPiB,KAAKhB,SAAS,CAAE2B,KAAM5B,EAAEG,OAAOC,U,+BAUvB,IAAD,OACP,OACE,qBAAKO,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,oBAAIA,UAAU,OAAd,oCAEF,sBAAMF,OAAO,IAAb,SACE,gCACE,uBACEE,UAAU,UACVC,KAAMC,KACNC,YAAY,kBACZC,SAAU,SAACc,GAAD,OAAW,EAAKC,SAASD,MAGrC,wBACElB,UAAU,MACVC,KAAK,SACLI,QAAS,kBAAI,EAAKW,MAAMI,OAAO,EAAKvB,MAAMoB,OAH5C,iC,GAnCSV,cCoCRc,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAMFC,YAAc,SAACL,GACbtB,QAAQC,IAAIqB,GACZ,EAAK3B,SAAS,CAAE2B,SACG,GAAfA,EAAKM,OACP,EAAKjC,SAAS,CAAEkC,MAAO,aAEjBC,OAAOC,MAAM,iCAXrB,EAAK7B,MAAQ,CACXoB,KAAM,GACNO,MAAO,UAJG,E,qDAkBZ,OACE,gCACE,cAAC,EAAD,IACqB,UAApBlB,KAAKT,MAAM2B,MACV,cAAC,EAAD,CAAUJ,OAAQd,KAAKgB,cAEvB,cAAC,EAAD,W,GAzBQK,IAAMpB,WCMJqB,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAE,EAAF,IACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.dc088506.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"./ChatInput.css\";\r\nclass ChatInput extends Component {\r\n  \r\n  constructor(){\r\n      super()\r\n      this.state={\r\n          text:''\r\n      }\r\n  }\r\n  texting=(e)=>{\r\n        this.setState({text:e.target.value})\r\n       \r\n  }\r\n  display=()=>{\r\n    console.log(this.state.text)\r\n  }\r\n  \r\n    render() {\r\n    return (\r\n      <div>\r\n        <form action=\"#\" id=\"send-container\">\r\n          <div className=\"chat\">\r\n            <input className=\"inp\" \r\n            type={Text} \r\n            placeholder=\"Type a message\"\r\n            onChange={(e)=>this.texting(e)} />\r\n        \r\n            <button \r\n            onClick={this.display}\r\n            className=\"button1\"\r\n             type=\"submit\">\r\n              Send\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatInput;\r\n","import React from 'react';\r\nimport './Messages.css'\r\n\r\n\r\nconst Messages = () => {\r\n    return (\r\n        <div>\r\n            <p>sam</p>\r\n            <div className=\"msg-container left animate__animated animate__bounce\" >\r\n                hello world ,this is message testing\r\n            </div>\r\n            <p className=\"right\">you</p>\r\n            <div className=\"msg-container right\">\r\n                hello world ,this is message testing\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport default Messages;\r\n","import React from 'react';\r\nimport './ChatBox.css';\r\nimport ChatInput from './ChatInput';\r\nimport Messages from './Messages';\r\n\r\n\r\n\r\nconst Chatbox = () => {\r\n    return ( < div className = \"wrapper\" >\r\n        <\r\n        div className = \"chatbox\" >\r\n        <\r\n        Messages / >\r\n        <\r\n        ChatInput / >\r\n        <\r\n        /div> <\r\n        /div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nexport default Chatbox;","export default __webpack_public_path__ + \"static/media/logo.d1330cc6.png\";","import React from 'react';\r\nimport './Navbar.css';\r\nimport logo from './logo.png'\r\nconst Navbar = () => {\r\n    return (\r\n        \r\n           <nav className=\"navbar  sticky-top navbar-expand-sm navbar-light bg-light\">\r\n               <a href=\"#\" className=\"navbar-brand name\">\r\n               <img src={logo} className=\"logo\" alt=\"logo\"/>\r\n               Messanger\r\n               </a>\r\n           </nav>\r\n\r\n        \r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\nimport \"./UserName.css\";\r\nclass UserName extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  username(e) {\r\n    this.setState({ name: e.target.value });\r\n    \r\n  }\r\n\r\n//   chatRoom(e) {\r\n//     e.preventDefault();\r\n//     console.log(\"clicked\");\r\n   \r\n//   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"chatbox center\">\r\n          <div className=\"heading\">\r\n            <h1 className=\"glow\">Welcome to chat room</h1>\r\n          </div>\r\n          <form action=\"#\">\r\n            <div>\r\n              <input\r\n                className=\"name-in\"\r\n                type={Text}\r\n                placeholder=\"Enter your name\"\r\n                onChange={(event) => this.username(event)}\r\n              />\r\n\r\n              <button\r\n                className=\"btn\"\r\n                type=\"submit\"\r\n                onClick={()=>this.props.Router(this.state.name)}>\r\n                Enter\r\n              </button>\r\n\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserName;\r\n","import React from \"react\";\nimport Chatbox from \"./components/Chatbox\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport UserName from \"./components/UserName\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      route: \"signin\",\n    };\n  }\n  handleEntry = (name) => {\n    console.log(name);\n    this.setState({ name });\n    if (name.length != 0) {\n      this.setState({ route: \"chatRoom\" });\n    }else{\n            window.alert(\"please enter your name first\")\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        {this.state.route == \"signin\" ? (\n          <UserName Router={this.handleEntry} />\n        ) : (\n          <Chatbox />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  < App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}